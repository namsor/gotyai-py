# coding: utf-8

"""
    Gotyai API v3

    Gotyai API : the Spartan explainable AI   # noqa: E501

    OpenAPI spec version: 3.0.2
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from gotyai_client.api_client import ApiClient


class ClassifyApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def explain_many(self, classifier_uuid, **kwargs):  # noqa: E501
        """Predict a category given the subjet's features, with explainability.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.explain_many(classifier_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_uuid: (required)
        :param BatchPredictIn batch_predict_in: The features.
        :return: BatchPredictOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.explain_many_with_http_info(classifier_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.explain_many_with_http_info(classifier_uuid, **kwargs)  # noqa: E501
            return data

    def explain_many_with_http_info(self, classifier_uuid, **kwargs):  # noqa: E501
        """Predict a category given the subjet's features, with explainability.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.explain_many_with_http_info(classifier_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_uuid: (required)
        :param BatchPredictIn batch_predict_in: The features.
        :return: BatchPredictOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['classifier_uuid', 'batch_predict_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method explain_many" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'classifier_uuid' is set
        if ('classifier_uuid' not in local_var_params or
                local_var_params['classifier_uuid'] is None):
            raise ValueError("Missing the required parameter `classifier_uuid` when calling `explain_many`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'classifier_uuid' in local_var_params:
            path_params['classifierUuid'] = local_var_params['classifier_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_predict_in' in local_var_params:
            body_params = local_var_params['batch_predict_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/explainMany/{classifierUuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPredictOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def explain_one(self, classifier_uuid, **kwargs):  # noqa: E501
        """Predict a category given the subjet's features, with explainability.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.explain_one(classifier_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_uuid: (required)
        :param PredictIn predict_in: The features.
        :return: PredictOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.explain_one_with_http_info(classifier_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.explain_one_with_http_info(classifier_uuid, **kwargs)  # noqa: E501
            return data

    def explain_one_with_http_info(self, classifier_uuid, **kwargs):  # noqa: E501
        """Predict a category given the subjet's features, with explainability.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.explain_one_with_http_info(classifier_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_uuid: (required)
        :param PredictIn predict_in: The features.
        :return: PredictOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['classifier_uuid', 'predict_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method explain_one" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'classifier_uuid' is set
        if ('classifier_uuid' not in local_var_params or
                local_var_params['classifier_uuid'] is None):
            raise ValueError("Missing the required parameter `classifier_uuid` when calling `explain_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'classifier_uuid' in local_var_params:
            path_params['classifierUuid'] = local_var_params['classifier_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'predict_in' in local_var_params:
            body_params = local_var_params['predict_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/explainOne/{classifierUuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PredictOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fit_many(self, classifier_uuid, **kwargs):  # noqa: E501
        """Fit multiple rows in the training sample (up to 100)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fit_many(classifier_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_uuid: (required)
        :param BatchFitIn batch_fit_in: A list of feature/values and target class value.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fit_many_with_http_info(classifier_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.fit_many_with_http_info(classifier_uuid, **kwargs)  # noqa: E501
            return data

    def fit_many_with_http_info(self, classifier_uuid, **kwargs):  # noqa: E501
        """Fit multiple rows in the training sample (up to 100)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fit_many_with_http_info(classifier_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_uuid: (required)
        :param BatchFitIn batch_fit_in: A list of feature/values and target class value.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['classifier_uuid', 'batch_fit_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fit_many" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'classifier_uuid' is set
        if ('classifier_uuid' not in local_var_params or
                local_var_params['classifier_uuid'] is None):
            raise ValueError("Missing the required parameter `classifier_uuid` when calling `fit_many`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'classifier_uuid' in local_var_params:
            path_params['classifierUuid'] = local_var_params['classifier_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_fit_in' in local_var_params:
            body_params = local_var_params['batch_fit_in']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/fitMany/{classifierUuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fit_one(self, classifier_uuid, **kwargs):  # noqa: E501
        """Fit one row in the training sample.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fit_one(classifier_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_uuid: (required)
        :param FitIn fit_in: A list of feature/values and target class value.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fit_one_with_http_info(classifier_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.fit_one_with_http_info(classifier_uuid, **kwargs)  # noqa: E501
            return data

    def fit_one_with_http_info(self, classifier_uuid, **kwargs):  # noqa: E501
        """Fit one row in the training sample.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fit_one_with_http_info(classifier_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_uuid: (required)
        :param FitIn fit_in: A list of feature/values and target class value.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['classifier_uuid', 'fit_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fit_one" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'classifier_uuid' is set
        if ('classifier_uuid' not in local_var_params or
                local_var_params['classifier_uuid'] is None):
            raise ValueError("Missing the required parameter `classifier_uuid` when calling `fit_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'classifier_uuid' in local_var_params:
            path_params['classifierUuid'] = local_var_params['classifier_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'fit_in' in local_var_params:
            body_params = local_var_params['fit_in']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/fitOne/{classifierUuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def multinomial(self, classifier_name, **kwargs):  # noqa: E501
        """Get the multinomila classifier by its name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.multinomial(classifier_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_name: (required)
        :return: ClassifierOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.multinomial_with_http_info(classifier_name, **kwargs)  # noqa: E501
        else:
            (data) = self.multinomial_with_http_info(classifier_name, **kwargs)  # noqa: E501
            return data

    def multinomial_with_http_info(self, classifier_name, **kwargs):  # noqa: E501
        """Get the multinomila classifier by its name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.multinomial_with_http_info(classifier_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_name: (required)
        :return: ClassifierOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['classifier_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method multinomial" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'classifier_name' is set
        if ('classifier_name' not in local_var_params or
                local_var_params['classifier_name'] is None):
            raise ValueError("Missing the required parameter `classifier_name` when calling `multinomial`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'classifier_name' in local_var_params:
            path_params['classifierName'] = local_var_params['classifier_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/multinomial/{classifierName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClassifierOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def multinomial1(self, **kwargs):  # noqa: E501
        """Get all the multinomila classifiers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.multinomial1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ClassifierOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.multinomial1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.multinomial1_with_http_info(**kwargs)  # noqa: E501
            return data

    def multinomial1_with_http_info(self, **kwargs):  # noqa: E501
        """Get all the multinomila classifiers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.multinomial1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ClassifierOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method multinomial1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/multinomial', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClassifierOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def multinomial_create(self, **kwargs):  # noqa: E501
        """Create a multinomial classiifer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.multinomial_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClassifierSpecIn classifier_spec_in: The classifier name and list of categories.
        :return: ClassifierOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.multinomial_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.multinomial_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def multinomial_create_with_http_info(self, **kwargs):  # noqa: E501
        """Create a multinomial classiifer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.multinomial_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClassifierSpecIn classifier_spec_in: The classifier name and list of categories.
        :return: ClassifierOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['classifier_spec_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method multinomial_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'classifier_spec_in' in local_var_params:
            body_params = local_var_params['classifier_spec_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/multinomialCreate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClassifierOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def predict_many(self, classifier_uuid, **kwargs):  # noqa: E501
        """Predict a category given the subjecct's features, for up to 100 rows at a time.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.predict_many(classifier_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_uuid: (required)
        :param BatchPredictIn batch_predict_in: The features.
        :return: BatchPredictOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.predict_many_with_http_info(classifier_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.predict_many_with_http_info(classifier_uuid, **kwargs)  # noqa: E501
            return data

    def predict_many_with_http_info(self, classifier_uuid, **kwargs):  # noqa: E501
        """Predict a category given the subjecct's features, for up to 100 rows at a time.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.predict_many_with_http_info(classifier_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_uuid: (required)
        :param BatchPredictIn batch_predict_in: The features.
        :return: BatchPredictOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['classifier_uuid', 'batch_predict_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method predict_many" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'classifier_uuid' is set
        if ('classifier_uuid' not in local_var_params or
                local_var_params['classifier_uuid'] is None):
            raise ValueError("Missing the required parameter `classifier_uuid` when calling `predict_many`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'classifier_uuid' in local_var_params:
            path_params['classifierUuid'] = local_var_params['classifier_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_predict_in' in local_var_params:
            body_params = local_var_params['batch_predict_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/predictMany/{classifierUuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPredictOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def predict_one(self, classifier_uuid, **kwargs):  # noqa: E501
        """Predict a category given the subjet's features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.predict_one(classifier_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_uuid: (required)
        :param PredictIn predict_in: The features.
        :return: PredictOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.predict_one_with_http_info(classifier_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.predict_one_with_http_info(classifier_uuid, **kwargs)  # noqa: E501
            return data

    def predict_one_with_http_info(self, classifier_uuid, **kwargs):  # noqa: E501
        """Predict a category given the subjet's features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.predict_one_with_http_info(classifier_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classifier_uuid: (required)
        :param PredictIn predict_in: The features.
        :return: PredictOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['classifier_uuid', 'predict_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method predict_one" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'classifier_uuid' is set
        if ('classifier_uuid' not in local_var_params or
                local_var_params['classifier_uuid'] is None):
            raise ValueError("Missing the required parameter `classifier_uuid` when calling `predict_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'classifier_uuid' in local_var_params:
            path_params['classifierUuid'] = local_var_params['classifier_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'predict_in' in local_var_params:
            body_params = local_var_params['predict_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/predictOne/{classifierUuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PredictOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
