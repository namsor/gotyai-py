# coding: utf-8

"""
    Gotyai API v3

    Gotyai API : the Spartan explainable AI   # noqa: E501

    OpenAPI spec version: 3.0.2
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClassifierOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'categories': 'list[str]',
        'classifier_name': 'str',
        'uuid': 'str',
        'user_id': 'str',
        'created_date_time': 'int'
    }

    attribute_map = {
        'categories': 'categories',
        'classifier_name': 'classifierName',
        'uuid': 'uuid',
        'user_id': 'userId',
        'created_date_time': 'createdDateTime'
    }

    def __init__(self, categories=None, classifier_name=None, uuid=None, user_id=None, created_date_time=None):  # noqa: E501
        """ClassifierOut - a model defined in OpenAPI"""  # noqa: E501

        self._categories = None
        self._classifier_name = None
        self._uuid = None
        self._user_id = None
        self._created_date_time = None
        self.discriminator = None

        if categories is not None:
            self.categories = categories
        if classifier_name is not None:
            self.classifier_name = classifier_name
        if uuid is not None:
            self.uuid = uuid
        if user_id is not None:
            self.user_id = user_id
        if created_date_time is not None:
            self.created_date_time = created_date_time

    @property
    def categories(self):
        """Gets the categories of this ClassifierOut.  # noqa: E501


        :return: The categories of this ClassifierOut.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ClassifierOut.


        :param categories: The categories of this ClassifierOut.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def classifier_name(self):
        """Gets the classifier_name of this ClassifierOut.  # noqa: E501


        :return: The classifier_name of this ClassifierOut.  # noqa: E501
        :rtype: str
        """
        return self._classifier_name

    @classifier_name.setter
    def classifier_name(self, classifier_name):
        """Sets the classifier_name of this ClassifierOut.


        :param classifier_name: The classifier_name of this ClassifierOut.  # noqa: E501
        :type: str
        """

        self._classifier_name = classifier_name

    @property
    def uuid(self):
        """Gets the uuid of this ClassifierOut.  # noqa: E501


        :return: The uuid of this ClassifierOut.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ClassifierOut.


        :param uuid: The uuid of this ClassifierOut.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def user_id(self):
        """Gets the user_id of this ClassifierOut.  # noqa: E501


        :return: The user_id of this ClassifierOut.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ClassifierOut.


        :param user_id: The user_id of this ClassifierOut.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def created_date_time(self):
        """Gets the created_date_time of this ClassifierOut.  # noqa: E501


        :return: The created_date_time of this ClassifierOut.  # noqa: E501
        :rtype: int
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this ClassifierOut.


        :param created_date_time: The created_date_time of this ClassifierOut.  # noqa: E501
        :type: int
        """

        self._created_date_time = created_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassifierOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
