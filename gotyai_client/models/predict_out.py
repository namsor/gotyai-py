# coding: utf-8

"""
    Gotyai API v3

    Gotyai API : the Spartan explainable AI   # noqa: E501

    OpenAPI spec version: 3.0.2
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PredictOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'x': 'dict(str, str)',
        'y': 'str',
        'score': 'float',
        'proba': 'float',
        'explanation': 'str'
    }

    attribute_map = {
        'x': 'x',
        'y': 'y',
        'score': 'score',
        'proba': 'proba',
        'explanation': 'explanation'
    }

    def __init__(self, x=None, y=None, score=None, proba=None, explanation=None):  # noqa: E501
        """PredictOut - a model defined in OpenAPI"""  # noqa: E501

        self._x = None
        self._y = None
        self._score = None
        self._proba = None
        self._explanation = None
        self.discriminator = None

        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if score is not None:
            self.score = score
        if proba is not None:
            self.proba = proba
        if explanation is not None:
            self.explanation = explanation

    @property
    def x(self):
        """Gets the x of this PredictOut.  # noqa: E501


        :return: The x of this PredictOut.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this PredictOut.


        :param x: The x of this PredictOut.  # noqa: E501
        :type: dict(str, str)
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this PredictOut.  # noqa: E501


        :return: The y of this PredictOut.  # noqa: E501
        :rtype: str
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this PredictOut.


        :param y: The y of this PredictOut.  # noqa: E501
        :type: str
        """

        self._y = y

    @property
    def score(self):
        """Gets the score of this PredictOut.  # noqa: E501


        :return: The score of this PredictOut.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this PredictOut.


        :param score: The score of this PredictOut.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def proba(self):
        """Gets the proba of this PredictOut.  # noqa: E501


        :return: The proba of this PredictOut.  # noqa: E501
        :rtype: float
        """
        return self._proba

    @proba.setter
    def proba(self, proba):
        """Sets the proba of this PredictOut.


        :param proba: The proba of this PredictOut.  # noqa: E501
        :type: float
        """

        self._proba = proba

    @property
    def explanation(self):
        """Gets the explanation of this PredictOut.  # noqa: E501


        :return: The explanation of this PredictOut.  # noqa: E501
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this PredictOut.


        :param explanation: The explanation of this PredictOut.  # noqa: E501
        :type: str
        """

        self._explanation = explanation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PredictOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
